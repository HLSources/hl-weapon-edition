#ifndef RENDERSYSTEM_H
#define RENDERSYSTEM_H

#include "com_model.h"
#include "r_studioint.h"

extern engine_studio_api_t IEngineStudio;
extern vec3_t ev_punchangle;

typedef enum rendersystemtype_e
{
	RSTYPE_SYSTEM = 0,
	RSTYPE_ROTATING,
//...
};

//-----------------------------------------------------------------------------
// Basic Render System, root class for all systems.
// This is a simple square non-rotating surface (sprite).
//-----------------------------------------------------------------------------
class CRenderSystem
{
	friend class CRenderManager;

public:
	CRenderSystem(void);

	CRenderSystem(const Vector &origin, const Vector &velocity, const Vector &angles, int sprindex, float frame, float framerate, int r_mode, byte r, byte g, byte b, float a, float adelta, float scale, float scaledelta, float timetolive);
	virtual ~CRenderSystem(void);// ALL RS DESTRUCTORS MUST BE DECLARED AS VIRTUAL

	virtual void ResetParameters(void);// XDM3035: UNDONE: does not work as desired!
	virtual bool Update(const float &time, const double &elapsedTime);
	virtual void Render(void);
	virtual void CreateEntities(void);
	virtual void InitializeSystem(void);
	virtual void KillSystem(void);
	virtual cl_entity_t *FollowEntity(void);
	virtual void UpdateFrame(const float &time, const double &elapsedTime);
	virtual void ApplyForce(const Vector &origin, const Vector &force, float radius, bool point);
	virtual bool IsRemoving(void) { return removenow; };// Render System is about to be removed! Don't do anything with it!
	virtual unsigned int GetType(void) { return RSTYPE_SYSTEM; }

	bool InitTexture(int texture_index);
	bool PointIsVisible(const Vector &point);

	unsigned int GetIndex(void) { return index; };

	Vector m_vecOrigin;
	Vector m_vecVelocity;
	Vector m_vecAngles;
// TODO:	Vector m_vecScale;

	float m_fDieTime;
	float m_fScale;
	float m_fScaleDelta;
	float m_fBrightness;
	float m_fBrightnessDelta;
	float m_fFrame;// must be float, so it can accumulate half-frames generated by elapsedTime
	float m_fFrameRate;
	int m_iFrame;
	color24 m_color;// TODO: use float?
	float m_fColorDelta[3];
//	color24 m_colordelta;

	float m_fSizeX;// system dimensions, these are actually texture half-sizes
	float m_fSizeY;

	int m_iRenderMode;

	int m_iFlags;
	int m_iFollowFlags;
	int m_iFollowEntity;// is it a bad idea to store entity pointer?

	bool dying;

	model_s *m_pTexture;

//	bool (*UpdateCallback)(CRenderSystem *pSystem, float time);// BUGBUG: set to NULL somewhere before updating the system
protected:
	unsigned int index;
	int texindex;
	bool removenow;// use in constructors to prevent system initialization

	CRenderSystem *m_pNext;
};

#endif // RENDERSYSTEM_H
